// protoc --go_out=. --go-grpc_out=. services.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.1
// source: services.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StringReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringReq) Reset() {
	*x = StringReq{}
	mi := &file_services_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringReq) ProtoMessage() {}

func (x *StringReq) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringReq.ProtoReflect.Descriptor instead.
func (*StringReq) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{0}
}

func (x *StringReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Int32SliceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numbers []int32 `protobuf:"varint,1,rep,packed,name=numbers,proto3" json:"numbers,omitempty"`
}

func (x *Int32SliceReq) Reset() {
	*x = Int32SliceReq{}
	mi := &file_services_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int32SliceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32SliceReq) ProtoMessage() {}

func (x *Int32SliceReq) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32SliceReq.ProtoReflect.Descriptor instead.
func (*Int32SliceReq) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{1}
}

func (x *Int32SliceReq) GetNumbers() []int32 {
	if x != nil {
		return x.Numbers
	}
	return nil
}

type StringSliceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strings []string `protobuf:"bytes,1,rep,name=strings,proto3" json:"strings,omitempty"`
}

func (x *StringSliceReq) Reset() {
	*x = StringSliceReq{}
	mi := &file_services_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringSliceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringSliceReq) ProtoMessage() {}

func (x *StringSliceReq) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringSliceReq.ProtoReflect.Descriptor instead.
func (*StringSliceReq) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{2}
}

func (x *StringSliceReq) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

type SumPermutedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numbers []int32 `protobuf:"varint,1,rep,packed,name=numbers,proto3" json:"numbers,omitempty"`
	Shift   int32   `protobuf:"varint,2,opt,name=shift,proto3" json:"shift,omitempty"`
}

func (x *SumPermutedReq) Reset() {
	*x = SumPermutedReq{}
	mi := &file_services_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SumPermutedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumPermutedReq) ProtoMessage() {}

func (x *SumPermutedReq) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumPermutedReq.ProtoReflect.Descriptor instead.
func (*SumPermutedReq) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{3}
}

func (x *SumPermutedReq) GetNumbers() []int32 {
	if x != nil {
		return x.Numbers
	}
	return nil
}

func (x *SumPermutedReq) GetShift() int32 {
	if x != nil {
		return x.Shift
	}
	return 0
}

type CaesarCipherReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text      string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Direction string `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction,omitempty"`
	Shift     int32  `protobuf:"varint,3,opt,name=shift,proto3" json:"shift,omitempty"`
}

func (x *CaesarCipherReq) Reset() {
	*x = CaesarCipherReq{}
	mi := &file_services_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaesarCipherReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaesarCipherReq) ProtoMessage() {}

func (x *CaesarCipherReq) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaesarCipherReq.ProtoReflect.Descriptor instead.
func (*CaesarCipherReq) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{4}
}

func (x *CaesarCipherReq) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CaesarCipherReq) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *CaesarCipherReq) GetShift() int32 {
	if x != nil {
		return x.Shift
	}
	return 0
}

type Int32Res struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Int32Res) Reset() {
	*x = Int32Res{}
	mi := &file_services_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int32Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32Res) ProtoMessage() {}

func (x *Int32Res) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32Res.ProtoReflect.Descriptor instead.
func (*Int32Res) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{5}
}

func (x *Int32Res) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type StringRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringRes) Reset() {
	*x = StringRes{}
	mi := &file_services_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringRes) ProtoMessage() {}

func (x *StringRes) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringRes.ProtoReflect.Descriptor instead.
func (*StringRes) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{6}
}

func (x *StringRes) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Int32SliceRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numbers []int32 `protobuf:"varint,1,rep,packed,name=numbers,proto3" json:"numbers,omitempty"`
}

func (x *Int32SliceRes) Reset() {
	*x = Int32SliceRes{}
	mi := &file_services_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int32SliceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32SliceRes) ProtoMessage() {}

func (x *Int32SliceRes) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32SliceRes.ProtoReflect.Descriptor instead.
func (*Int32SliceRes) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{7}
}

func (x *Int32SliceRes) GetNumbers() []int32 {
	if x != nil {
		return x.Numbers
	}
	return nil
}

type StringSliceRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strings []string `protobuf:"bytes,1,rep,name=strings,proto3" json:"strings,omitempty"`
}

func (x *StringSliceRes) Reset() {
	*x = StringSliceRes{}
	mi := &file_services_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringSliceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringSliceRes) ProtoMessage() {}

func (x *StringSliceRes) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringSliceRes.ProtoReflect.Descriptor instead.
func (*StringSliceRes) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{8}
}

func (x *StringSliceRes) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

type DoubleSliceRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numbers []float64 `protobuf:"fixed64,1,rep,packed,name=numbers,proto3" json:"numbers,omitempty"`
}

func (x *DoubleSliceRes) Reset() {
	*x = DoubleSliceRes{}
	mi := &file_services_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoubleSliceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleSliceRes) ProtoMessage() {}

func (x *DoubleSliceRes) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleSliceRes.ProtoReflect.Descriptor instead.
func (*DoubleSliceRes) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{9}
}

func (x *DoubleSliceRes) GetNumbers() []float64 {
	if x != nil {
		return x.Numbers
	}
	return nil
}

var File_services_proto protoreflect.FileDescriptor

var file_services_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x21, 0x0a, 0x09, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x29, 0x0a,
	0x0d, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x2a, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x40, 0x0a, 0x0e, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x6d, 0x75,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x68, 0x69, 0x66, 0x74, 0x22, 0x59, 0x0a, 0x0f, 0x43, 0x61, 0x65, 0x73, 0x61, 0x72,
	0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x22, 0x20, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x21, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x29, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x22, 0x2a, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x2a, 0x0a,
	0x0e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x32, 0xe7, 0x07, 0x0a, 0x08, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x4d, 0x69, 0x78, 0x57, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x73, 0x12, 0x18, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x53,
	0x75, 0x6d, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x52, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x12, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x18, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x12, 0x3e,
	0x0a, 0x0c, 0x43, 0x61, 0x65, 0x73, 0x61, 0x72, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x19,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x65, 0x73, 0x61, 0x72,
	0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x13, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x69, 0x67, 0x69, 0x74, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x52, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x56, 0x6f, 0x77, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x47, 0x43, 0x44, 0x12,
	0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x65, 0x73, 0x12, 0x3b, 0x0a,
	0x0b, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x18, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x6d, 0x75,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x12, 0x53, 0x75,
	0x6d, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x65, 0x73, 0x12, 0x49, 0x0a,
	0x14, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_proto_rawDescOnce sync.Once
	file_services_proto_rawDescData = file_services_proto_rawDesc
)

func file_services_proto_rawDescGZIP() []byte {
	file_services_proto_rawDescOnce.Do(func() {
		file_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_proto_rawDescData)
	})
	return file_services_proto_rawDescData
}

var file_services_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_services_proto_goTypes = []any{
	(*StringReq)(nil),       // 0: services.StringReq
	(*Int32SliceReq)(nil),   // 1: services.Int32SliceReq
	(*StringSliceReq)(nil),  // 2: services.StringSliceReq
	(*SumPermutedReq)(nil),  // 3: services.SumPermutedReq
	(*CaesarCipherReq)(nil), // 4: services.CaesarCipherReq
	(*Int32Res)(nil),        // 5: services.Int32Res
	(*StringRes)(nil),       // 6: services.StringRes
	(*Int32SliceRes)(nil),   // 7: services.Int32SliceRes
	(*StringSliceRes)(nil),  // 8: services.StringSliceRes
	(*DoubleSliceRes)(nil),  // 9: services.DoubleSliceRes
}
var file_services_proto_depIdxs = []int32{
	2,  // 0: services.Services.MixWords:input_type -> services.StringSliceReq
	2,  // 1: services.Services.CountPerfectSquares:input_type -> services.StringSliceReq
	1,  // 2: services.Services.SumReversed:input_type -> services.Int32SliceReq
	1,  // 3: services.Services.AverageWithinRange:input_type -> services.Int32SliceReq
	2,  // 4: services.Services.ConvertBinary:input_type -> services.StringSliceReq
	4,  // 5: services.Services.CaesarCipher:input_type -> services.CaesarCipherReq
	0,  // 6: services.Services.DecodeText:input_type -> services.StringReq
	1,  // 7: services.Services.CountDigitsPrime:input_type -> services.Int32SliceReq
	2,  // 8: services.Services.CountEvenVowels:input_type -> services.StringSliceReq
	2,  // 9: services.Services.GCD:input_type -> services.StringSliceReq
	3,  // 10: services.Services.SumPermuted:input_type -> services.SumPermutedReq
	1,  // 11: services.Services.SumDuplicatedFirst:input_type -> services.Int32SliceReq
	1,  // 12: services.Services.FilterComplexNumbers:input_type -> services.Int32SliceReq
	2,  // 13: services.Services.FilterValidPasswords:input_type -> services.StringSliceReq
	2,  // 14: services.Services.GenerateRandomPasswords:input_type -> services.StringSliceReq
	8,  // 15: services.Services.MixWords:output_type -> services.StringSliceRes
	5,  // 16: services.Services.CountPerfectSquares:output_type -> services.Int32Res
	5,  // 17: services.Services.SumReversed:output_type -> services.Int32Res
	5,  // 18: services.Services.AverageWithinRange:output_type -> services.Int32Res
	7,  // 19: services.Services.ConvertBinary:output_type -> services.Int32SliceRes
	6,  // 20: services.Services.CaesarCipher:output_type -> services.StringRes
	6,  // 21: services.Services.DecodeText:output_type -> services.StringRes
	5,  // 22: services.Services.CountDigitsPrime:output_type -> services.Int32Res
	5,  // 23: services.Services.CountEvenVowels:output_type -> services.Int32Res
	5,  // 24: services.Services.GCD:output_type -> services.Int32Res
	5,  // 25: services.Services.SumPermuted:output_type -> services.Int32Res
	5,  // 26: services.Services.SumDuplicatedFirst:output_type -> services.Int32Res
	9,  // 27: services.Services.FilterComplexNumbers:output_type -> services.DoubleSliceRes
	8,  // 28: services.Services.FilterValidPasswords:output_type -> services.StringSliceRes
	8,  // 29: services.Services.GenerateRandomPasswords:output_type -> services.StringSliceRes
	15, // [15:30] is the sub-list for method output_type
	0,  // [0:15] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_services_proto_init() }
func file_services_proto_init() {
	if File_services_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_proto_goTypes,
		DependencyIndexes: file_services_proto_depIdxs,
		MessageInfos:      file_services_proto_msgTypes,
	}.Build()
	File_services_proto = out.File
	file_services_proto_rawDesc = nil
	file_services_proto_goTypes = nil
	file_services_proto_depIdxs = nil
}
